// Code generated by MockGen. DO NOT EDIT.
// Source: rbac.go

// Package rbacmocks is a generated GoMock package.
package rbacmocks

import (
	rbac "github.com/geoah/go-kube-api/internal/rbac"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
	v10 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	reflect "reflect"
)

// MockEnumerator is a mock of Enumerator interface
type MockEnumerator struct {
	ctrl     *gomock.Controller
	recorder *MockEnumeratorMockRecorder
}

// MockEnumeratorMockRecorder is the mock recorder for MockEnumerator
type MockEnumeratorMockRecorder struct {
	mock *MockEnumerator
}

// NewMockEnumerator creates a new mock instance
func NewMockEnumerator(ctrl *gomock.Controller) *MockEnumerator {
	mock := &MockEnumerator{ctrl: ctrl}
	mock.recorder = &MockEnumeratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnumerator) EXPECT() *MockEnumeratorMockRecorder {
	return m.recorder
}

// EnumberateByRoleBindings mocks base method
func (m *MockEnumerator) EnumberateByRoleBindings(namespace string, filters ...rbac.RoleBindingFilter) ([]v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{namespace}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnumberateByRoleBindings", varargs...)
	ret0, _ := ret[0].([]v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumberateByRoleBindings indicates an expected call of EnumberateByRoleBindings
func (mr *MockEnumeratorMockRecorder) EnumberateByRoleBindings(namespace interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{namespace}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumberateByRoleBindings", reflect.TypeOf((*MockEnumerator)(nil).EnumberateByRoleBindings), varargs...)
}

// MockrbacV1Interface is a mock of rbacV1Interface interface
type MockrbacV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockrbacV1InterfaceMockRecorder
}

// MockrbacV1InterfaceMockRecorder is the mock recorder for MockrbacV1Interface
type MockrbacV1InterfaceMockRecorder struct {
	mock *MockrbacV1Interface
}

// NewMockrbacV1Interface creates a new mock instance
func NewMockrbacV1Interface(ctrl *gomock.Controller) *MockrbacV1Interface {
	mock := &MockrbacV1Interface{ctrl: ctrl}
	mock.recorder = &MockrbacV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrbacV1Interface) EXPECT() *MockrbacV1InterfaceMockRecorder {
	return m.recorder
}

// Roles mocks base method
func (m *MockrbacV1Interface) Roles(namespace string) v10.RoleInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles", namespace)
	ret0, _ := ret[0].(v10.RoleInterface)
	return ret0
}

// Roles indicates an expected call of Roles
func (mr *MockrbacV1InterfaceMockRecorder) Roles(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockrbacV1Interface)(nil).Roles), namespace)
}

// RoleBindings mocks base method
func (m *MockrbacV1Interface) RoleBindings(namespace string) v10.RoleBindingInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings", namespace)
	ret0, _ := ret[0].(v10.RoleBindingInterface)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings
func (mr *MockrbacV1InterfaceMockRecorder) RoleBindings(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockrbacV1Interface)(nil).RoleBindings), namespace)
}
